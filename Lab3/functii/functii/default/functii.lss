
functii.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000c7  00000000  00000000  00000197  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005d  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000d6  00000000  00000000  000002bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008c  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>

int main(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	00 d0       	rcall	.+0      	; 0x76 <main+0xa>
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
   // bit  7 6 5 4  3  2  1  0
   //outs- - - - -  -  f2 f1 f0
   unsigned char outs;
   unsigned char temp;

   DDRA = 0xff;
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	8f ef       	ldi	r24, 0xFF	; 255
  80:	80 83       	st	Z, r24
   DDRB = 0x00;
  82:	e7 e3       	ldi	r30, 0x37	; 55
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1

   while(1){
      //memoreaza valorile variabilelor de intrare
      //bit    7654 3 2  1  0
      //inputs=       x2 x1 x0
      inputs = PINB;
  88:	e6 e3       	ldi	r30, 0x36	; 54
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8e 83       	std	Y+6, r24	; 0x06
      inputs &= 0x07;
  90:	8e 81       	ldd	r24, Y+6	; 0x06
  92:	87 70       	andi	r24, 0x07	; 7
  94:	8e 83       	std	Y+6, r24	; 0x06

      x0 = inputs & 1<<0;
  96:	8e 81       	ldd	r24, Y+6	; 0x06
  98:	81 70       	andi	r24, 0x01	; 1
  9a:	8b 83       	std	Y+3, r24	; 0x03
      x1 = inputs>>1 & 1;
  9c:	8e 81       	ldd	r24, Y+6	; 0x06
  9e:	86 95       	lsr	r24
  a0:	81 70       	andi	r24, 0x01	; 1
  a2:	8c 83       	std	Y+4, r24	; 0x04
      x2 = inputs>>2 & 1;
  a4:	8e 81       	ldd	r24, Y+6	; 0x06
  a6:	86 95       	lsr	r24
  a8:	86 95       	lsr	r24
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	8d 83       	std	Y+5, r24	; 0x05

      outs = 0;
  ae:	1a 82       	std	Y+2, r1	; 0x02
      temp = x0 ^ x1 ^ x2;
  b0:	9b 81       	ldd	r25, Y+3	; 0x03
  b2:	8c 81       	ldd	r24, Y+4	; 0x04
  b4:	98 27       	eor	r25, r24
  b6:	8d 81       	ldd	r24, Y+5	; 0x05
  b8:	89 27       	eor	r24, r25
  ba:	89 83       	std	Y+1, r24	; 0x01
      // testam bitu 0 din temp
      if(temp & 1<<0){
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	88 2f       	mov	r24, r24
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	81 70       	andi	r24, 0x01	; 1
  c4:	90 70       	andi	r25, 0x00	; 0
  c6:	88 23       	and	r24, r24
  c8:	19 f0       	breq	.+6      	; 0xd0 <main+0x64>
         outs |= 1<<0; //setam bitu 0 din outs
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	8a 83       	std	Y+2, r24	; 0x02
      }
      
      if(inputs < 3){
  d0:	8e 81       	ldd	r24, Y+6	; 0x06
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	18 f4       	brcc	.+6      	; 0xdc <main+0x70>
         outs |= 1<<1; // setam bitu 1 din outs
  d6:	8a 81       	ldd	r24, Y+2	; 0x02
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	8a 83       	std	Y+2, r24	; 0x02
      }

      if(inputs==2 || inputs == 3 || inputs == 5 || inputs == 7){
  dc:	8e 81       	ldd	r24, Y+6	; 0x06
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	49 f0       	breq	.+18     	; 0xf4 <main+0x88>
  e2:	8e 81       	ldd	r24, Y+6	; 0x06
  e4:	83 30       	cpi	r24, 0x03	; 3
  e6:	31 f0       	breq	.+12     	; 0xf4 <main+0x88>
  e8:	8e 81       	ldd	r24, Y+6	; 0x06
  ea:	85 30       	cpi	r24, 0x05	; 5
  ec:	19 f0       	breq	.+6      	; 0xf4 <main+0x88>
  ee:	8e 81       	ldd	r24, Y+6	; 0x06
  f0:	87 30       	cpi	r24, 0x07	; 7
  f2:	19 f4       	brne	.+6      	; 0xfa <main+0x8e>
         outs |= 1<<2; // setam bitu 2 din outs
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	84 60       	ori	r24, 0x04	; 4
  f8:	8a 83       	std	Y+2, r24	; 0x02
      }

      PORTA = outs;
  fa:	eb e3       	ldi	r30, 0x3B	; 59
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	80 83       	st	Z, r24
 102:	c2 cf       	rjmp	.-124    	; 0x88 <main+0x1c>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
