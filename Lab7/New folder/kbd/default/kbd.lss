
kbd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000332  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000332  000003c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800072  00800072  000003d8  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c0  00000000  00000000  00000418  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000378  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000207  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00000a57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000de4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013f  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000221  00000000  00000000  00001003  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e3       	ldi	r30, 0x32	; 50
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 97 01 	jmp	0x32e	; 0x32e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
void clrLCD();
unsigned char temp;

#define NOKEY 0x7f
#define DELAY 200
int main(){
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
	char code_ante = NOKEY;
	char code_now = NOKEY;
	unsigned char kbhit = 0;
	char kbcode;
	unsigned char loop_cnt=0;
	sysinit(); //nu este in curs, dar este necesar
  96:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <sysinit>
  9a:	0f e7       	ldi	r16, 0x7F	; 127
  9c:	80 e0       	ldi	r24, 0x00	; 0
	
	while(1){ //bucla principala
	//
	if(loop_cnt==DELAY){ //citirile se fac din 15 ms in 15 ms
  9e:	88 3c       	cpi	r24, 0xC8	; 200
  a0:	49 f4       	brne	.+18     	; 0xb4 <main+0x22>
		loop_cnt=0;
		code_ante = code_now;
		code_now = kbscan();
  a2:	0e 94 41 01 	call	0x282	; 0x282 <kbscan>
  a6:	18 2f       	mov	r17, r24
		if( code_ante == NOKEY && code_now != NOKEY){
  a8:	0f 37       	cpi	r16, 0x7F	; 127
  aa:	11 f4       	brne	.+4      	; 0xb0 <main+0x1e>
  ac:	8f 37       	cpi	r24, 0x7F	; 127
  ae:	31 f4       	brne	.+12     	; 0xbc <main+0x2a>
  b0:	01 2f       	mov	r16, r17
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	10 2f       	mov	r17, r16
		kbhit=0;
		putchLCD(kbcode);
	//prelucreaza kbcode; de exemplu afiseaza-l
	}
	//
	loop_cnt++;
  b6:	8f 5f       	subi	r24, 0xFF	; 255
  b8:	01 2f       	mov	r16, r17
  ba:	f1 cf       	rjmp	.-30     	; 0x9e <main+0xc>
	}
	//
	//consuma codul
	if(kbhit){
		kbhit=0;
		putchLCD(kbcode);
  bc:	0e 94 04 01 	call	0x208	; 0x208 <putchLCD>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	f9 cf       	rjmp	.-14     	; 0xb6 <main+0x24>

000000c4 <wait>:

#define nop asm("nop"::);

volatile unsigned long int delay;

void wait(unsigned long int val){
  c4:	9b 01       	movw	r18, r22
  c6:	ac 01       	movw	r20, r24
   for(delay=0;delay<val;delay++){}
  c8:	10 92 73 00 	sts	0x0073, r1
  cc:	10 92 74 00 	sts	0x0074, r1
  d0:	10 92 75 00 	sts	0x0075, r1
  d4:	10 92 76 00 	sts	0x0076, r1
  d8:	13 c0       	rjmp	.+38     	; 0x100 <wait+0x3c>
  da:	80 91 73 00 	lds	r24, 0x0073
  de:	90 91 74 00 	lds	r25, 0x0074
  e2:	a0 91 75 00 	lds	r26, 0x0075
  e6:	b0 91 76 00 	lds	r27, 0x0076
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	a1 1d       	adc	r26, r1
  ee:	b1 1d       	adc	r27, r1
  f0:	80 93 73 00 	sts	0x0073, r24
  f4:	90 93 74 00 	sts	0x0074, r25
  f8:	a0 93 75 00 	sts	0x0075, r26
  fc:	b0 93 76 00 	sts	0x0076, r27
 100:	80 91 73 00 	lds	r24, 0x0073
 104:	90 91 74 00 	lds	r25, 0x0074
 108:	a0 91 75 00 	lds	r26, 0x0075
 10c:	b0 91 76 00 	lds	r27, 0x0076
 110:	82 17       	cp	r24, r18
 112:	93 07       	cpc	r25, r19
 114:	a4 07       	cpc	r26, r20
 116:	b5 07       	cpc	r27, r21
 118:	00 f3       	brcs	.-64     	; 0xda <wait+0x16>
}
 11a:	08 95       	ret

0000011c <rd_LCDreg>:

unsigned char rd_LCDreg(unsigned char vRS){
   unsigned char data;
   DDRD = 0;
 11c:	11 ba       	out	0x11, r1	; 17
   if(vRS == 0 ) {
 11e:	88 23       	and	r24, r24
 120:	11 f4       	brne	.+4      	; 0x126 <rd_LCDreg+0xa>
      clrbit(PORTB,RS); // RS = '0'
 122:	c5 98       	cbi	0x18, 5	; 24
 124:	01 c0       	rjmp	.+2      	; 0x128 <rd_LCDreg+0xc>
   }
   else
      setbit(PORTB,RS); // RS = '1'
 126:	c5 9a       	sbi	0x18, 5	; 24
   setbit(PORTB,RW); //RW = '1'
 128:	c6 9a       	sbi	0x18, 6	; 24
   nop;
 12a:	00 00       	nop

   setbit(PORTB, E); // E='1'
 12c:	c7 9a       	sbi	0x18, 7	; 24
	...
   nop; nop; nop; nop; nop;
 136:	00 00       	nop

   data = PIND;
 138:	80 b3       	in	r24, 0x10	; 16
   clrbit(PORTB,E); //E = '0'
 13a:	c7 98       	cbi	0x18, 7	; 24
   nop;
 13c:	00 00       	nop

   DDRD = 0xff;
 13e:	9f ef       	ldi	r25, 0xFF	; 255
 140:	91 bb       	out	0x11, r25	; 17

   return data;
}
 142:	08 95       	ret

00000144 <wr_LCDreg>:

void wr_LCDreg(unsigned char vRS, unsigned char data){
   
   if(vRS == 0 ) {
 144:	88 23       	and	r24, r24
 146:	11 f4       	brne	.+4      	; 0x14c <wr_LCDreg+0x8>
      clrbit(PORTB,RS); // RS = '0'
 148:	c5 98       	cbi	0x18, 5	; 24
 14a:	01 c0       	rjmp	.+2      	; 0x14e <wr_LCDreg+0xa>
   }
   else
      setbit(PORTB,RS); // RS = '1'
 14c:	c5 9a       	sbi	0x18, 5	; 24
   clrbit(PORTB,RW); //RW = '0'
 14e:	c6 98       	cbi	0x18, 6	; 24
   PORTD = data;
 150:	62 bb       	out	0x12, r22	; 18
   nop;
 152:	00 00       	nop

   setbit(PORTB,E); // E = '1'
 154:	c7 9a       	sbi	0x18, 7	; 24
	...
   nop; nop; nop; nop; nop;
 15e:	00 00       	nop

   clrbit(PORTB,E); // E = '0'
 160:	c7 98       	cbi	0x18, 7	; 24
   nop;
 162:	00 00       	nop
}
 164:	08 95       	ret

00000166 <ckbf>:


void ckbf(){
   while(rd_LCDreg(SReg) & 1<<7)
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	0e 94 8e 00 	call	0x11c	; 0x11c <rd_LCDreg>
 16c:	87 fd       	sbrc	r24, 7
 16e:	fb cf       	rjmp	.-10     	; 0x166 <ckbf>
   {
   }

}
 170:	08 95       	ret

00000172 <initLCD>:

void initLCD(){
   ckbf();
 172:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   // Function set
   //bit 7 6 5 4   3 2 1 0
   //    0 0 1 DL  N F — — 
   //    0 0 1 1   1 1 0 0 
   wr_LCDreg(IReg, 0b00111100);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	6c e3       	ldi	r22, 0x3C	; 60
 17a:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 17e:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   // entry mode set
   //bit 7 6 5 4   3 2 1    0
   //    0 0 0 0   0 1 I/D  S   
   //    0 0 0 0   0 1 1    0
   wr_LCDreg(IReg, 0b00000110);
 182:	80 e0       	ldi	r24, 0x00	; 0
 184:	66 e0       	ldi	r22, 0x06	; 6
 186:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 18a:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   // Display on/off control
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   1 D C B   
   //    0 0 0 0   1 1 1 1
   wr_LCDreg(IReg, 0b00001111);
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	6f e0       	ldi	r22, 0x0F	; 15
 192:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>

   ckbf();
 196:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1 
   wr_LCDreg(IReg, 0b00000001);
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
}
 1a2:	08 95       	ret

000001a4 <sysinit>:

void sysinit(){
   PORTA = 0;
 1a4:	1b ba       	out	0x1b, r1	; 27
   PORTB = 0;
 1a6:	18 ba       	out	0x18, r1	; 24
   DDRB  = 0b11100000;
 1a8:	80 ee       	ldi	r24, 0xE0	; 224
 1aa:	87 bb       	out	0x17, r24	; 23
   DDRD  = 0xff;
 1ac:	8f ef       	ldi	r24, 0xFF	; 255
 1ae:	81 bb       	out	0x11, r24	; 17
#define nop asm("nop"::);

volatile unsigned long int delay;

void wait(unsigned long int val){
   for(delay=0;delay<val;delay++){}
 1b0:	10 92 73 00 	sts	0x0073, r1
 1b4:	10 92 74 00 	sts	0x0074, r1
 1b8:	10 92 75 00 	sts	0x0075, r1
 1bc:	10 92 76 00 	sts	0x0076, r1
 1c0:	13 c0       	rjmp	.+38     	; 0x1e8 <sysinit+0x44>
 1c2:	80 91 73 00 	lds	r24, 0x0073
 1c6:	90 91 74 00 	lds	r25, 0x0074
 1ca:	a0 91 75 00 	lds	r26, 0x0075
 1ce:	b0 91 76 00 	lds	r27, 0x0076
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	a1 1d       	adc	r26, r1
 1d6:	b1 1d       	adc	r27, r1
 1d8:	80 93 73 00 	sts	0x0073, r24
 1dc:	90 93 74 00 	sts	0x0074, r25
 1e0:	a0 93 75 00 	sts	0x0075, r26
 1e4:	b0 93 76 00 	sts	0x0076, r27
 1e8:	80 91 73 00 	lds	r24, 0x0073
 1ec:	90 91 74 00 	lds	r25, 0x0074
 1f0:	a0 91 75 00 	lds	r26, 0x0075
 1f4:	b0 91 76 00 	lds	r27, 0x0076
 1f8:	80 5c       	subi	r24, 0xC0	; 192
 1fa:	94 4d       	sbci	r25, 0xD4	; 212
 1fc:	a1 40       	sbci	r26, 0x01	; 1
 1fe:	b0 40       	sbci	r27, 0x00	; 0
 200:	00 f3       	brcs	.-64     	; 0x1c2 <sysinit+0x1e>
   PORTA = 0;
   PORTB = 0;
   DDRB  = 0b11100000;
   DDRD  = 0xff;
   wait(120000UL);
   initLCD();
 202:	0e 94 b9 00 	call	0x172	; 0x172 <initLCD>
}
 206:	08 95       	ret

00000208 <putchLCD>:

void putchLCD( char ch){
 208:	1f 93       	push	r17
 20a:	18 2f       	mov	r17, r24
   ckbf();
 20c:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   wr_LCDreg(DReg, ch);
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	61 2f       	mov	r22, r17
 214:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
}
 218:	1f 91       	pop	r17
 21a:	08 95       	ret

0000021c <putsLCD>:

void putsLCD( char* ch){
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
   ckbf();
 222:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
 226:	03 c0       	rjmp	.+6      	; 0x22e <putsLCD+0x12>
   while(*ch != 0x00){
      putchLCD(*ch++);
 228:	21 96       	adiw	r28, 0x01	; 1
 22a:	0e 94 04 01 	call	0x208	; 0x208 <putchLCD>
   wr_LCDreg(DReg, ch);
}

void putsLCD( char* ch){
   ckbf();
   while(*ch != 0x00){
 22e:	88 81       	ld	r24, Y
 230:	88 23       	and	r24, r24
 232:	d1 f7       	brne	.-12     	; 0x228 <putsLCD+0xc>
      putchLCD(*ch++);
   }
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <clrLCD>:

void clrLCD(){
   ckbf();
 23a:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   //Clear display
   //bit 7 6 5 4   3 2 1 0
   //    0 0 0 0   0 0 0 1 
   wr_LCDreg(IReg, 0b00000001);
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
}
 246:	08 95       	ret

00000248 <gotoLC>:

void gotoLC(unsigned char line, unsigned char col){
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	08 2f       	mov	r16, r24
 24e:	16 2f       	mov	r17, r22
   ckbf();
 250:	0e 94 b3 00 	call	0x166	; 0x166 <ckbf>
   if((line == 1 || line == 2) && (col <= 16 && col >= 1)){
 254:	80 2f       	mov	r24, r16
 256:	81 50       	subi	r24, 0x01	; 1
 258:	82 30       	cpi	r24, 0x02	; 2
 25a:	80 f4       	brcc	.+32     	; 0x27c <gotoLC+0x34>
 25c:	61 2f       	mov	r22, r17
 25e:	61 50       	subi	r22, 0x01	; 1
 260:	60 31       	cpi	r22, 0x10	; 16
 262:	60 f4       	brcc	.+24     	; 0x27c <gotoLC+0x34>
      wr_LCDreg(IReg,0b10000000 + 0b01000000 * (line-1) + (col-1));
 264:	80 2f       	mov	r24, r16
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	01 96       	adiw	r24, 0x01	; 1
 26a:	26 e0       	ldi	r18, 0x06	; 6
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	2a 95       	dec	r18
 272:	e1 f7       	brne	.-8      	; 0x26c <gotoLC+0x24>
 274:	68 0f       	add	r22, r24
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 a2 00 	call	0x144	; 0x144 <wr_LCDreg>
   
   }

}
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <kbscan>:

char kbscan(){
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	61 97       	sbiw	r28, 0x11	; 17
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
	unsigned char cola=0; //coloana activa
	unsigned char cod_intern;
	char cod_extern;
	char tabela_trans[] = "123A456B789C*0#D";
	
	for( DDRA = 1<<4; DDRA != 0; DDRA <<=1) {
 296:	80 e1       	ldi	r24, 0x10	; 16
 298:	0c c0       	rjmp	.+24     	; 0x2b2 <kbscan+0x30>
	...
		nop; nop; nop; nop; nop; nop;
		cols=~PINA;
 2a6:	29 b3       	in	r18, 0x19	; 25
 2a8:	20 95       	com	r18
		cols = cols & 0b00001111;
 2aa:	2f 70       	andi	r18, 0x0F	; 15
		
		if( cols != 0){
 2ac:	41 f4       	brne	.+16     	; 0x2be <kbscan+0x3c>
	unsigned char cola=0; //coloana activa
	unsigned char cod_intern;
	char cod_extern;
	char tabela_trans[] = "123A456B789C*0#D";
	
	for( DDRA = 1<<4; DDRA != 0; DDRA <<=1) {
 2ae:	8a b3       	in	r24, 0x1a	; 26
 2b0:	88 0f       	add	r24, r24
 2b2:	8a bb       	out	0x1a, r24	; 26
 2b4:	8a b3       	in	r24, 0x1a	; 26
 2b6:	88 23       	and	r24, r24
 2b8:	81 f7       	brne	.-32     	; 0x29a <kbscan+0x18>
 2ba:	8f e7       	ldi	r24, 0x7F	; 127
 2bc:	2f c0       	rjmp	.+94     	; 0x31c <kbscan+0x9a>
	
	if ( cols == 0 ){
		return NOKEY;	
	}
	// calcul linii
	temp = DDRA;
 2be:	8a b3       	in	r24, 0x1a	; 26
	if (temp == 0b00010000){
 2c0:	80 31       	cpi	r24, 0x10	; 16
 2c2:	61 f0       	breq	.+24     	; 0x2dc <kbscan+0x5a>
		lia = 0;
	}
	else if (temp == 0b00100000){
 2c4:	80 32       	cpi	r24, 0x20	; 32
 2c6:	11 f4       	brne	.+4      	; 0x2cc <kbscan+0x4a>
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	09 c0       	rjmp	.+18     	; 0x2de <kbscan+0x5c>
		lia = 1;
	}
	else if (temp == 0b01000000){
 2cc:	80 34       	cpi	r24, 0x40	; 64
 2ce:	11 f4       	brne	.+4      	; 0x2d4 <kbscan+0x52>
 2d0:	92 e0       	ldi	r25, 0x02	; 2
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <kbscan+0x5c>
		lia = 2;
	}
	else if (temp == 0b10000000){
 2d4:	80 38       	cpi	r24, 0x80	; 128
 2d6:	11 f4       	brne	.+4      	; 0x2dc <kbscan+0x5a>
 2d8:	93 e0       	ldi	r25, 0x03	; 3
 2da:	01 c0       	rjmp	.+2      	; 0x2de <kbscan+0x5c>
 2dc:	90 e0       	ldi	r25, 0x00	; 0
		lia = 3;
	}
	
	// calcul coloane
	if(cols & 0b00000001){
 2de:	20 fd       	sbrc	r18, 0
 2e0:	0c c0       	rjmp	.+24     	; 0x2fa <kbscan+0x78>
		cola = 0;
	}
	else if(cols & 0b00000010){
 2e2:	21 ff       	sbrs	r18, 1
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <kbscan+0x68>
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	09 c0       	rjmp	.+18     	; 0x2fc <kbscan+0x7a>
		cola = 1;
	}
	else if(cols & 0b00000100){
 2ea:	22 ff       	sbrs	r18, 2
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <kbscan+0x70>
 2ee:	22 e0       	ldi	r18, 0x02	; 2
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <kbscan+0x7a>
		cola = 2;
	}
	else if(cols & 0b00001000){
 2f2:	23 ff       	sbrs	r18, 3
 2f4:	02 c0       	rjmp	.+4      	; 0x2fa <kbscan+0x78>
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	01 c0       	rjmp	.+2      	; 0x2fc <kbscan+0x7a>
 2fa:	20 e0       	ldi	r18, 0x00	; 0
	unsigned char cols;
	unsigned char lia=0; //linia activa
	unsigned char cola=0; //coloana activa
	unsigned char cod_intern;
	char cod_extern;
	char tabela_trans[] = "123A456B789C*0#D";
 2fc:	de 01       	movw	r26, r28
 2fe:	11 96       	adiw	r26, 0x01	; 1
 300:	e0 e6       	ldi	r30, 0x60	; 96
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	81 e1       	ldi	r24, 0x11	; 17
 306:	01 90       	ld	r0, Z+
 308:	0d 92       	st	X+, r0
 30a:	81 50       	subi	r24, 0x01	; 1
 30c:	e1 f7       	brne	.-8      	; 0x306 <kbscan+0x84>
		cola = 3;
	}
	
	cod_intern = lia * 4 + cola;
	
	cod_extern= tabela_trans[cod_intern];
 30e:	99 0f       	add	r25, r25
 310:	99 0f       	add	r25, r25
 312:	92 0f       	add	r25, r18
 314:	fe 01       	movw	r30, r28
 316:	e9 0f       	add	r30, r25
 318:	f1 1d       	adc	r31, r1
 31a:	81 81       	ldd	r24, Z+1	; 0x01
 
	return cod_extern;
}//end kbscan
 31c:	61 96       	adiw	r28, 0x11	; 17
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	cf 91       	pop	r28
 32a:	df 91       	pop	r29
 32c:	08 95       	ret

0000032e <_exit>:
 32e:	f8 94       	cli

00000330 <__stop_program>:
 330:	ff cf       	rjmp	.-2      	; 0x330 <__stop_program>
