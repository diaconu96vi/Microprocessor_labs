
blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000095  00000000  00000000  00000171  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000064  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000a4  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000075  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#define P 1250L
#define TH1 (P*10/100)
#define TH2 (P*90/100)
//125 = 1ms
int main(){
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
	volatile long i;
   long int th = TH1;
	
	DDRA=0xff;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	8a bb       	out	0x1a, r24	; 26
	i=0;
  7c:	19 82       	std	Y+1, r1	; 0x01
  7e:	1a 82       	std	Y+2, r1	; 0x02
  80:	1b 82       	std	Y+3, r1	; 0x03
  82:	1c 82       	std	Y+4, r1	; 0x04
	
	while(1){
		
		if(i==0)
			PORTA=1; //aprinde LED-ul
  84:	21 e0       	ldi	r18, 0x01	; 1
	DDRA=0xff;
	i=0;
	
	while(1){
		
		if(i==0)
  86:	89 81       	ldd	r24, Y+1	; 0x01
  88:	9a 81       	ldd	r25, Y+2	; 0x02
  8a:	ab 81       	ldd	r26, Y+3	; 0x03
  8c:	bc 81       	ldd	r27, Y+4	; 0x04
  8e:	00 97       	sbiw	r24, 0x00	; 0
  90:	a1 05       	cpc	r26, r1
  92:	b1 05       	cpc	r27, r1
  94:	09 f4       	brne	.+2      	; 0x98 <main+0x2c>
			PORTA=1; //aprinde LED-ul
  96:	2b bb       	out	0x1b, r18	; 27
			
			if(i==th)
  98:	89 81       	ldd	r24, Y+1	; 0x01
  9a:	9a 81       	ldd	r25, Y+2	; 0x02
  9c:	ab 81       	ldd	r26, Y+3	; 0x03
  9e:	bc 81       	ldd	r27, Y+4	; 0x04
  a0:	8d 37       	cpi	r24, 0x7D	; 125
  a2:	91 05       	cpc	r25, r1
  a4:	a1 05       	cpc	r26, r1
  a6:	b1 05       	cpc	r27, r1
  a8:	09 f4       	brne	.+2      	; 0xac <main+0x40>
				PORTA=0; //stinge LED-ul
  aa:	1b ba       	out	0x1b, r1	; 27
			i++;
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	ab 81       	ldd	r26, Y+3	; 0x03
  b2:	bc 81       	ldd	r27, Y+4	; 0x04
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	a1 1d       	adc	r26, r1
  b8:	b1 1d       	adc	r27, r1
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	ab 83       	std	Y+3, r26	; 0x03
  c0:	bc 83       	std	Y+4, r27	; 0x04
			
			if(i==P)
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	ab 81       	ldd	r26, Y+3	; 0x03
  c8:	bc 81       	ldd	r27, Y+4	; 0x04
  ca:	82 5e       	subi	r24, 0xE2	; 226
  cc:	94 40       	sbci	r25, 0x04	; 4
  ce:	a0 40       	sbci	r26, 0x00	; 0
  d0:	b0 40       	sbci	r27, 0x00	; 0
  d2:	c9 f6       	brne	.-78     	; 0x86 <main+0x1a>
				i=0; //a trecut o secunda
  d4:	19 82       	std	Y+1, r1	; 0x01
  d6:	1a 82       	std	Y+2, r1	; 0x02
  d8:	1b 82       	std	Y+3, r1	; 0x03
  da:	1c 82       	std	Y+4, r1	; 0x04
  dc:	d4 cf       	rjmp	.-88     	; 0x86 <main+0x1a>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
